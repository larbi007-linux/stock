import React, { useState } from 'react';
import { LineChart, XAxis, YAxis, Line, CartesianGrid, Tooltip, Legend } from 'recharts';

interface Product {
  category: string;
  name: string;
  quantity: number;
}

interface Movement {
  product: Product;
  type: 'Entrée' | 'Sortie';
  quantity: number;
  date: string;
}

const categories = [
  'Électricité',
  'Luminaire',
  'Jardinage',
  'Outillage',
  'Sanitaire',
  'Quincaillerie',
  'Peinture',
  'Drougrie',
  'Démarque',
];

const App = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [movements, setMovements] = useState<Movement[]>([]);
  const [newProduct, setNewProduct] = useState<Product>({ category: '', name: '', quantity: 0 });
  const [newMovement, setNewMovement] = useState<Movement>({ product: { category: '', name: '', quantity: 0 }, type: 'Entrée', quantity: 0, date: new Date().toISOString().split('T')[0] });

  const handleAddProduct = () => {
    setProducts([...products, newProduct]);
    setNewProduct({ category: '', name: '', quantity: 0 });
  };

  const handleAddMovement = () => {
    setMovements([...movements, newMovement]);
    setNewMovement({ product: { category: '', name: '', quantity: 0 }, type: 'Entrée', quantity: 0, date: new Date().toISOString().split('T')[0] });
  };

  const handleSendMovements = () => {
    const movementsCSV = movements.map(movement => `${movement.product.name};${movement.type};${movement.quantity};${movement.date}`).join('\n');
    const a = document.createElement('a');
    a.href = `mailto:?subject=Movements&body=${movementsCSV}`;
    a.click();
  };

  return (
    <div className="max-w-7xl mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Gestion de stock</h1>
      <div className="flex flex-wrap justify-between mb-4">
        <div className="w-full md:w-1/2 xl:w-1/3 mb-4 md:mb-0">
          <h2 className="text-xl font-bold mb-2">Ajouter un produit</h2>
          <div className="flex flex-wrap justify-between mb-2">
            <select className="w-full md:w-1/2 xl:w-1/3 mb-2 md:mb-0" value={newProduct.category} onChange={e => setNewProduct({ ...newProduct, category: e.target.value })}>
              <option value="">Catégorie</option>
              {categories.map(category => <option key={category} value={category}>{category}</option>)}
            </select>
            <input className="w-full md:w-1/2 xl:w-1/3 mb-2 md:mb-0" type="text" value={newProduct.name} onChange={e => setNewProduct({ ...newProduct, name: e.target.value })} placeholder="Nom" />
            <input className="w-full md:w-1/2 xl:w-1/3 mb-2 md:mb-0" type="number" value={newProduct.quantity} onChange={e => setNewProduct({ ...newProduct, quantity: parseInt(e.target.value) })} placeholder="Quantité" />
          </div>
          <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" onClick={handleAddProduct}>Ajouter</button>
        </div>
        <div className="w-full md:w-1/2 xl:w-1/3 mb-4 md:mb-0">
          <h2 className="text-xl font-bold mb-2">Ajouter un mouvement</h2>
          <div className="flex flex-wrap justify-between mb-2">
            <select className="w-full md:w-1/2 xl:w-1/3 mb-2 md:mb-0" value={newMovement.product.category} onChange={e => setNewMovement({ ...newMovement, product: { ...newMovement.product, category: e.target.value } })}>
              <option value="">Catégorie</option>
              {categories.map(category => <option key={category} value={category}>{category}</option>)}
            </select>
            <input className="w-full md:w-1/2 xl:w-1/3 mb-2 md:mb-0" type="text" value={newMovement.product.name} onChange={e => setNewMovement({ ...newMovement, product: { ...newMovement.product, name: e.target.value } })} placeholder="Nom" />
            <input className="w-full md:w-1/2 xl:w-1/3 mb-2 md:mb-0" type="number" value={newMovement.quantity} onChange={e => setNewMovement({ ...newMovement, quantity: parseInt(e.target.value) })} placeholder="Quantité" />
            <select className="w-full md:w-1/2 xl:w-1/3 mb-2 md:mb-0" value={newMovement.type} onChange={e => setNewMovement({ ...newMovement, type: e.target.value as 'Entrée' | 'Sortie' })}>
              <option value="Entrée">Entrée</option>
              <option value="Sortie">Sortie</option>
            </select>
            <input className="w-full md:w-1/2 xl:w-1/3 mb-2 md:mb-0" type="date" value={newMovement.date} onChange={e => setNewMovement({ ...newMovement, date: e.target.value })} />
          </div>
          <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" onClick={handleAddMovement}>Ajouter</button>
        </div>
        <div className="w-full md:w-1/2 xl:w-1/3 mb-4 md:mb-0">
          <h2 className="text-xl font-bold mb-2">Produits</h2>
          <ul>
            {products.map((product, index) => <li key={index!}>{product.name} ({product.quantity})</li>)}
          </ul>
        </div>
        <div className="w-full md:w-1/2 xl:w-1/3 mb-4 md:mb-0">
          <h2 className="text-xl font-bold mb-2">Mouvements</h2>
          <ul>
            {movements.map((movement, index) => <li key={index!}>{movement.product.name} ({movement.type}) - {movement.quantity} ({movement.date})</li>)}
          </ul>
          <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" onClick={handleSendMovements}>Envoyer les mouvements</button>
        </div>
      </div>
    </div>
  );
};

export default App;
